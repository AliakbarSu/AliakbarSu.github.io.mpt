{"remainingRequest":"/Users/Ali/Desktop/medical-test/node_modules/babel-loader/lib/index.js!/Users/Ali/Desktop/medical-test/node_modules/eslint-loader/index.js??ref--13-0!/Users/Ali/Desktop/medical-test/src/store/admin.js","dependencies":[{"path":"/Users/Ali/Desktop/medical-test/src/store/admin.js","mtime":1627368454000},{"path":"/Users/Ali/Desktop/medical-test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Ali/Desktop/medical-test/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Ali/Desktop/medical-test/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQtaW5kZXgiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL0FsaS9EZXNrdG9wL21lZGljYWwtdGVzdC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSAiL1VzZXJzL0FsaS9EZXNrdG9wL21lZGljYWwtdGVzdC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkiOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICIvVXNlcnMvQWxpL0Rlc2t0b3AvbWVkaWNhbC10ZXN0L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyIjsKaW1wb3J0IGZpcmVzdG9yZSBmcm9tICcuLi8uLi9maXJlYmFzZSc7CmV4cG9ydCB2YXIgYWRtaW4gPSB7CiAgc3RvcmU6IGZ1bmN0aW9uIHN0b3JlKCkgewogICAgcmV0dXJuIHsKICAgICAgcXVlc3Rpb25zOiBbXSwKICAgICAgcXVlc3Rpb246IHsKICAgICAgICBrZXk6ICIiLAogICAgICAgIGFjdGl2ZTogZmFsc2UKICAgICAgfSwKICAgICAga2V5SWQ6ICJzIgogICAgfTsKICB9LAogIG11dGF0aW9uczogewogICAgc2V0UXVlc3Rpb25zOiBmdW5jdGlvbiBzZXRRdWVzdGlvbnMoc3RhdGUsIHBheWxvYWQpIHsKICAgICAgcmV0dXJuIHN0YXRlLnF1ZXN0aW9ucyA9IHBheWxvYWQ7CiAgICB9LAogICAgc2V0UXVlc3Rpb246IGZ1bmN0aW9uIHNldFF1ZXN0aW9uKHN0YXRlLCBwYXlsb2FkKSB7CiAgICAgIHN0YXRlLnF1ZXN0aW9uID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBwYXlsb2FkKSwge30sIHsKICAgICAgICBjaG9pY2VzOiBfdG9Db25zdW1hYmxlQXJyYXkocGF5bG9hZC5jaG9pY2VzKS5tYXAoZnVuY3Rpb24gKGNoKSB7CiAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgY2gpOwogICAgICAgIH0pCiAgICAgIH0pOwogICAgfSwKICAgIHNldEtleUlkOiBmdW5jdGlvbiBzZXRLZXlJZChzdGF0ZSwgcGF5bG9hZCkgewogICAgICBzdGF0ZS5rZXlJZCA9IHBheWxvYWQ7CiAgICB9LAogICAgc2V0UXVlc3Rpb25TdGF0dXM6IGZ1bmN0aW9uIHNldFF1ZXN0aW9uU3RhdHVzKHN0YXRlLCBwYXlsb2FkKSB7CiAgICAgIHZhciBxdWVzdGlvbkluZGV4ID0gc3RhdGUucXVlc3Rpb25zLmZpbmRJbmRleChmdW5jdGlvbiAocSkgewogICAgICAgIHJldHVybiBxLmtleSA9PSBwYXlsb2FkLmtleTsKICAgICAgfSk7CgogICAgICB2YXIgcXVlc3Rpb25zQ29weSA9IF90b0NvbnN1bWFibGVBcnJheShzdGF0ZS5xdWVzdGlvbnMpOwoKICAgICAgcXVlc3Rpb25zQ29weVtxdWVzdGlvbkluZGV4XS5hY3RpdmUgPSBwYXlsb2FkLmNoYW5nZVRvOwogICAgICBzdGF0ZS5xdWVzdGlvbnMgPSBxdWVzdGlvbnNDb3B5OwogICAgICBzdGF0ZS5xdWVzdGlvbi5hY3RpdmUgPSBwYXlsb2FkLmNoYW5nZVRvOwogICAgfQogIH0sCiAgYWN0aW9uczogewogICAgc3VzcGVuZDogZnVuY3Rpb24gc3VzcGVuZChfcmVmLCBrZXkpIHsKICAgICAgdmFyIGNvbW1pdCA9IF9yZWYuY29tbWl0LAogICAgICAgICAgcm9vdFN0YXRlID0gX3JlZi5yb290U3RhdGU7CiAgICAgIHZhciBxdWVzdGlvbiA9IHJvb3RTdGF0ZS5hZG1pbi5xdWVzdGlvbnMuZmluZChmdW5jdGlvbiAocSkgewogICAgICAgIHJldHVybiBxLmtleSA9PSBrZXk7CiAgICAgIH0pOwogICAgICB2YXIgY2hhbmdlVG8gPSB0cnVlOwoKICAgICAgaWYgKHF1ZXN0aW9uLmFjdGl2ZSkgewogICAgICAgIGNoYW5nZVRvID0gZmFsc2U7CiAgICAgIH0KCiAgICAgIHJldHVybiBmaXJlc3RvcmUuZGIuY29sbGVjdGlvbigibW9kaWZpZWRRdWVzdGlvbnMiKS5kb2Moa2V5KS51cGRhdGUoewogICAgICAgIGFjdGl2ZTogY2hhbmdlVG8KICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgY29tbWl0KCJzZXRRdWVzdGlvbiIsIHJvb3RTdGF0ZS5hZG1pbi5xdWVzdGlvbnMuZmluZChmdW5jdGlvbiAocSkgewogICAgICAgICAgcmV0dXJuIHEua2V5ID09IGtleTsKICAgICAgICB9KSk7CiAgICAgICAgY29tbWl0KCJzZXRRdWVzdGlvblN0YXR1cyIsIHsKICAgICAgICAgIGtleToga2V5LAogICAgICAgICAgY2hhbmdlVG86IGNoYW5nZVRvCiAgICAgICAgfSk7CiAgICAgIH0pLmNhdGNoKGNvbnNvbGUubG9nKTsKICAgIH0sCiAgICBmZXRjaFF1ZXN0aW9uczogZnVuY3Rpb24gZmV0Y2hRdWVzdGlvbnMoX3JlZjIpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgY29tbWl0OwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYyLmNvbW1pdDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7CiAgICAgICAgICAgICAgICAgIGZpcmVzdG9yZS5kYi5jb2xsZWN0aW9uKCJtb2RpZmllZFF1ZXN0aW9ucyIpLmdldCgpLnRoZW4oZnVuY3Rpb24gKHF1ZXN0aW9uc0RvYykgewogICAgICAgICAgICAgICAgICAgIHZhciBxdWVzdGlvbnNBcnJheSA9IFtdOwogICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uc0RvYy5mb3JFYWNoKGZ1bmN0aW9uIChzbmFwc2hvdCkgewogICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb25zQXJyYXkucHVzaChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHNuYXBzaG90LmRhdGEoKSksIHt9LCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogc25hcHNob3QuaWQKICAgICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBjb21taXQoInNldFF1ZXN0aW9ucyIsIHF1ZXN0aW9uc0FycmF5KTsKICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0LnNlbnQpOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9CiAgfSwKICBnZXR0ZXJzOiB7CiAgICBnZXRDdXJyZW50TG9jYXRpb246IGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbihzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuY3VycmVudExvY2F0aW9uOwogICAgfSwKICAgIGdldFF1ZXN0aW9uczogZnVuY3Rpb24gZ2V0UXVlc3Rpb25zKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5xdWVzdGlvbnM7CiAgICB9LAogICAgZ2V0UXVlc3Rpb246IGZ1bmN0aW9uIGdldFF1ZXN0aW9uKHN0YXRlKSB7CiAgICAgIGNvbnNvbGUubG9nKHN0YXRlLmtleUlkKTsKICAgICAgcmV0dXJuIHN0YXRlLnF1ZXN0aW9uOwogICAgfQogIH0KfTs="},{"version":3,"sources":["/Users/Ali/Desktop/medical-test/src/store/admin.js"],"names":["firestore","admin","store","questions","question","key","active","keyId","mutations","setQuestions","state","payload","setQuestion","choices","map","ch","setKeyId","setQuestionStatus","questionIndex","findIndex","q","questionsCopy","changeTo","actions","suspend","commit","rootState","find","db","collection","doc","update","then","catch","console","log","fetchQuestions","Promise","resolve","get","questionsDoc","questionsArray","forEach","snapshot","push","data","id","getters","getCurrentLocation","currentLocation","getQuestions","getQuestion"],"mappings":"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","sourcesContent":["\nimport firestore from '../../firebase'\n\nexport const admin = {\n    store: () => {\n        return {\n            questions: [],\n            question: {\n                key: \"\",\n                active: false\n            },\n            keyId: \"s\"\n        }\n    },\n    mutations: {\n        setQuestions(state, payload) {\n            return state.questions = payload\n        },\n        setQuestion(state, payload) {\n            state.question = {...payload, choices: [...payload.choices].map(ch => ({...ch}))}\n        },\n        setKeyId(state, payload) {\n            state.keyId = payload\n        },\n        setQuestionStatus(state, payload) {\n            const questionIndex = state.questions.findIndex(q => q.key == payload.key)\n            const questionsCopy = [...state.questions] \n            questionsCopy[questionIndex].active = payload.changeTo\n            state.questions = questionsCopy\n            state.question.active = payload.changeTo\n        }\n    },\n    actions: {\n        suspend({commit, rootState}, key) {\n            const question = rootState.admin.questions.find(q => q.key == key)\n            let changeTo = true\n            if(question.active) {\n                changeTo = false\n            }\n            return firestore.db.collection(\"modifiedQuestions\").doc(key).update({\n                active: changeTo\n            })\n            .then(() => {\n                commit(\"setQuestion\", rootState.admin.questions.find(q => q.key == key))\n                commit(\"setQuestionStatus\", {key, changeTo})\n            })\n            .catch(console.log)\n        },\n        async fetchQuestions({commit}) {\n            \n            return await new Promise((resolve) => {\n                firestore.db.collection(\"modifiedQuestions\").get().then((questionsDoc) => {\n                    const questionsArray = []\n                    questionsDoc.forEach(snapshot => {\n                        questionsArray.push({...snapshot.data(), key: snapshot.id})\n                    })\n                        commit(\"setQuestions\", questionsArray)\n                        resolve()\n                })\n            \n            })\n            \n        }\n    },\n    getters: {\n        getCurrentLocation: (state) => {\n            return state.currentLocation\n        },\n        getQuestions: (state) => {\n            return state.questions\n        },\n        getQuestion: state => {\n            console.log(state.keyId)\n            return state.question\n        }\n    }\n}"]}]}