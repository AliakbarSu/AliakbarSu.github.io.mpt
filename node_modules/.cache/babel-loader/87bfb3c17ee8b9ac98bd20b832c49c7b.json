{"remainingRequest":"/Users/Ali/Desktop/medical-test/node_modules/babel-loader/lib/index.js!/Users/Ali/Desktop/medical-test/node_modules/eslint-loader/index.js??ref--13-0!/Users/Ali/Desktop/medical-test/src/store/test.js","dependencies":[{"path":"/Users/Ali/Desktop/medical-test/src/store/test.js","mtime":1627372970000},{"path":"/Users/Ali/Desktop/medical-test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Ali/Desktop/medical-test/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Ali/Desktop/medical-test/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/Ali/Desktop/medical-test/src/store/test.js"],"names":["convertTimeToMinutes","time","timeElapsed","Math","round","Number","EPSILON","pow","test","state","results","testStartedAt","subjects","mutations","setResults","setTestStartTime","startTime","setSubjectsPoints","questions","subjectsArray","map","q","subject","forEach","sub","includes","push","questionsArray","filter","subjectsPoints","qArray","points","reduce","total","curr","point","actions","commit","dispatch","payForTest","Promise","resolve","getters","getResults","processData","processedQuestions","question","correctOptions","choices","choice","isCorrect","op","id","gotCorrect","submitted_answer","answeredIn","endAt","startAt","getOverallScore","correctQuestions","incorrectQuestions","answeringTimes","proQa","totalAnsweringTime","averageAnsweringTime","length","score","qa","correct","incorrect","of","getCategoriesResults","sections","prev","dta","scores","section","totalQuestionsInSection","gotCorrectInSection","gotIncorrectInSection","totalSectionPotentialScore","totalSectionScores","scorePercentage","getAccuracyOverTime","questionsWithTime","pq","endTime","range","interval","times","t","data","timeElapsedInMinutes","count","getSpeedOverTime"],"mappings":"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","sourcesContent":["const convertTimeToMinutes = (time) => {\n    const timeElapsed = time / 60000\n    return Math.round((timeElapsed + Number.EPSILON) * Math.pow(10, 2)) / Math.pow(10, 2)\n}\n\n\nexport const test = {\n    state: () => {\n        return {\n            results: [],\n            testStartedAt: 0,\n            subjects: []\n        }\n    },\n    mutations: {\n        setResults(state, results) {\n            state.results = results\n        },\n        setTestStartTime(state, startTime) {\n            state.testStartedAt = startTime\n        },\n        setSubjectsPoints(state, questions) {\n            const subjectsArray = questions.map(q => q.subject)\n            let subjects = []\n            subjectsArray.forEach(sub => {\n                if(!subjects.includes(sub)) {\n                    subjects.push(sub)\n                }\n            })\n            const questionsArray = subjects.map(sub => questions.filter(q => q.subject == sub))\n            const subjectsPoints = questionsArray.map(qArray => {\n                return {\n                    points: qArray.reduce((total, curr) => total + curr.point, 0),\n                    subject: qArray[0].subject\n                }\n            })\n            state.subjects = subjectsPoints\n        }\n    },\n    actions: {\n        setResults({commit, dispatch}, results) {\n            commit(\"setResults\", results)\n            dispatch(\"updateTestsStatus\")\n        },\n        payForTest() {\n            return Promise.resolve(\"paid successfully!\")\n        }\n    },\n    getters: {\n        getResults: state => {\n            return state.results\n        },\n        processData: (state) => {\n            const processedQuestions = state.results.map(question => {\n                const correctOptions = question.choices.filter(choice => choice.isCorrect).map(op => op.id)\n                const gotCorrect =correctOptions.includes(question.submitted_answer.id)\n                const answeredIn = (question.endAt - question.startAt) / 1000 // changes millseconds to seconds\n                return {...question, gotCorrect, answeredIn}\n            })\n            return processedQuestions\n        },\n        getOverallScore: (state, getters) => {\n            const processedQuestions = getters.processData\n        \n            const correctQuestions = processedQuestions.filter(q => q.gotCorrect)\n            const incorrectQuestions = processedQuestions.filter(q => !q.gotCorrect)\n            \n            const answeringTimes = processedQuestions.map(proQa => proQa.answeredIn)\n            const totalAnsweringTime = answeringTimes.reduce((total, curr) => total + curr, 0)\n            const averageAnsweringTime = Math.round(totalAnsweringTime / answeringTimes.length, 2)\n            const score = correctQuestions.map(qa => qa.point).reduce((total, curr) => total + curr, 0)\n        \n            return {\n                correct: correctQuestions.length, \n                incorrect: incorrectQuestions.length,\n                of: processedQuestions.length,\n                averageAnsweringTime,\n                score: score\n            }\n        },\n        getCategoriesResults: (state, getters) => {\n            const processedQuestions = getters.processData\n            const sections = processedQuestions.reduce((prev, curr) => {\n                if(!prev.map(dta => dta.subject).includes(curr.subject)) {\n                return [...prev, curr]\n                }else {\n                return [...prev]\n                }\n            }, []).map(dta => dta.subject)\n        \n            const scores = sections.map(section => {\n                const totalQuestionsInSection = processedQuestions.filter(qa => qa.subject == section)\n                const gotCorrectInSection = totalQuestionsInSection.filter(qa => qa.gotCorrect)\n                const gotIncorrectInSection = totalQuestionsInSection.filter(qa => !qa.gotCorrect)\n                const answeringTimes = totalQuestionsInSection.map(proQa => proQa.answeredIn)\n                const totalAnsweringTime = answeringTimes.reduce((total, curr) => total + curr)\n                const averageAnsweringTime = Math.round(totalAnsweringTime / answeringTimes.length)\n                const totalSectionPotentialScore = state.subjects.filter(sub => sub.subject == section).reduce((total, curr) => total + curr.points, 0)\n                const totalSectionScores = gotCorrectInSection.map(qa => qa.point).reduce((total, curr) => total + curr, 0)\n                \n                return {\n                    section,\n                    averageAnsweringTime,\n                    correct: gotCorrectInSection.length,\n                    incorrect: gotIncorrectInSection.length,\n                    of: totalQuestionsInSection.length,\n                    score: totalSectionScores,\n                    scorePercentage: (totalSectionScores / totalSectionPotentialScore) * 100\n                }\n            })\n            return scores\n        },\n        getAccuracyOverTime: (state, getters) => {\n            const processedQuestions = getters.processData\n            const questionsWithTime = processedQuestions.map(pq => ({correct: pq.gotCorrect, time: pq.startAt}))\n            const startTime = questionsWithTime[0] ? questionsWithTime[0].time : 0\n            const endTime = questionsWithTime.length ? questionsWithTime[questionsWithTime.length - 1].time : 1\n            const range = endTime - startTime\n            const interval = range / 10;\n            const times = []\n            for(let t = startTime; t <= endTime; t+= interval) {\n                times.push({time: t})\n            }\n            const data = times.map(({time}) => {\n                const qa = questionsWithTime.filter(q => (q.time <= time) && (q.time >= time - interval))\n                const total = qa.map(q => q.correct).reduce((total, curr) => curr ? total + 1 : total, 0);\n                const timeElapsedInMinutes = convertTimeToMinutes(time - state.testStartedAt)\n                return {time: timeElapsedInMinutes, count: total}\n            })\n            return data\n        },\n        getSpeedOverTime: (state, getters) => {\n            const processedQuestions = getters.processData\n            return processedQuestions.map(pq => ({answeredIn: pq.answeredIn, time: convertTimeToMinutes(pq.startAt - state.testStartedAt)}))\n        }\n    }\n}"]}]}